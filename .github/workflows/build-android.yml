name: Build Android APK with Capacitor

on:
  push:
    branches:
      - main
      - DAIMTinit
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache node modules
      uses: actions/cache@v4
      with:
         path: ~/.npm
         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
         restore-keys: |
           ${{ runner.os }}-node-

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '20'
        distribution: 'temurin'
        
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Ionic CLI
      run: npm install -g @ionic/cli

    - name: Install npm dependencies
      run: npm ci

    - name: Install Playwright Package
      run: npm install -D @playwright/test@latest

    # Installation de Playwright et de ses dépendances
    - name: Install Playwright Package
      run: npx playwright install

    # Exécution des tests Playwright
    - name: Run Playwright tests
      run: npx playwright test tests/ --project=chromium

    - name: Cache Gradle Wrapper
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/wrapper
          ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build Ionic App
      run: ionic build --prod

    - name: Install Capacitor CLI
      run: npm install @capacitor/cli @capacitor/core

#    - name: Add Android Platform
#      run: |
#        npx cap add android

#    - name: Build Android APK
#      run: |
#        npx cap sync android
#        cd android
#        ./gradlew assembleDebug

#    - name: Upload APK
#      uses: actions/upload-artifact@v4
#      with:
#        name: android-apk
#        path: android/app/build/outputs/apk/debug/app-debug.apk
#    - name: Send APK via POST request
#      env:
#        BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
#      run: |
#        curl -X POST -H "Authorization: Bearer $BEARER_TOKEN" -F "file=@android/app/build/outputs/apk/debug/app-debug.apk" "https://uscloud.experitest.com/api/v1/applications/new"
    - name: Install WDIO
      run: npm init wdio ./WDIOproject -- --yes
    - name: Run DAICT tests
      run: |
        cd WDIOproject
        npx wdio run wdio.conf.cjs
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: logs
        path: logs
